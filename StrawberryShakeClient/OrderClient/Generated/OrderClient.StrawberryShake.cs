// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public static partial class OrderClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::StrawberryShakeClient.State.OrderClientStoreAccessor> AddOrderClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::StrawberryShakeClient.State.OrderClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.OrdersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.OrderClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.IOrderClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::StrawberryShakeClient.State.OrderClientStoreAccessor>("OrderClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("OrderClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.OrderEntity, global::StrawberryShakeClient.Orders_Orders_Order>, global::StrawberryShakeClient.State.Orders_Orders_OrderFromOrderEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.OrderlineEntity, global::StrawberryShakeClient.Orders_Orders_OrderLines_Orderline>, global::StrawberryShakeClient.State.Orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.ProductEntity, global::StrawberryShakeClient.Orders_Orders_OrderLines_Product_Product>, global::StrawberryShakeClient.State.Orders_Orders_OrderLines_Product_ProductFromProductEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShakeClient.OrderStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOrdersResult>, global::StrawberryShakeClient.State.OrdersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOrdersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.IOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOrdersResult>, global::StrawberryShakeClient.State.OrdersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryShakeClient.IOrdersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOrdersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOrdersResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.OrdersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.IOrdersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.OrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::StrawberryShakeClient.State.OrderClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.OrderClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.IOrderClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.OrderClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace StrawberryShakeClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrdersResult : global::System.IEquatable<OrdersResult>, IOrdersResult
    {
        public OrdersResult(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOrders_Orders> orders)
        {
            Orders = orders;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOrders_Orders> Orders { get; }

        public virtual global::System.Boolean Equals(OrdersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Orders, other.Orders));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OrdersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Orders_elm in Orders)
                {
                    hash ^= 397 * Orders_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Orders_Orders_Order : global::System.IEquatable<Orders_Orders_Order>, IOrders_Orders_Order
    {
        public Orders_Orders_Order(global::System.Int32 id, global::StrawberryShakeClient.OrderStatus orderStatus, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOrders_Orders_OrderLines> orderLines)
        {
            Id = id;
            OrderStatus = orderStatus;
            OrderLines = orderLines;
        }

        public global::System.Int32 Id { get; }

        public global::StrawberryShakeClient.OrderStatus OrderStatus { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOrders_Orders_OrderLines> OrderLines { get; }

        public virtual global::System.Boolean Equals(Orders_Orders_Order? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && OrderStatus.Equals(other.OrderStatus) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(OrderLines, other.OrderLines);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Orders_Orders_Order)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * OrderStatus.GetHashCode();
                foreach (var OrderLines_elm in OrderLines)
                {
                    hash ^= 397 * OrderLines_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Orders_Orders_OrderLines_Orderline : global::System.IEquatable<Orders_Orders_OrderLines_Orderline>, IOrders_Orders_OrderLines_Orderline
    {
        public Orders_Orders_OrderLines_Orderline(global::System.Int32 id, global::StrawberryShakeClient.IOrders_Orders_OrderLines_Product product)
        {
            Id = id;
            Product = product;
        }

        public global::System.Int32 Id { get; }

        public global::StrawberryShakeClient.IOrders_Orders_OrderLines_Product Product { get; }

        public virtual global::System.Boolean Equals(Orders_Orders_OrderLines_Orderline? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Product.Equals(other.Product);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Orders_Orders_OrderLines_Orderline)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Product.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Orders_Orders_OrderLines_Product_Product : global::System.IEquatable<Orders_Orders_OrderLines_Product_Product>, IOrders_Orders_OrderLines_Product_Product
    {
        public Orders_Orders_OrderLines_Product_Product(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(Orders_Orders_OrderLines_Product_Product? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Orders_Orders_OrderLines_Product_Product)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrdersResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOrders_Orders> Orders { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrders_Orders
    {
        public global::System.Int32 Id { get; }

        public global::StrawberryShakeClient.OrderStatus OrderStatus { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOrders_Orders_OrderLines> OrderLines { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrders_Orders_Order : IOrders_Orders
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrders_Orders_OrderLines
    {
        public global::System.Int32 Id { get; }

        public global::StrawberryShakeClient.IOrders_Orders_OrderLines_Product Product { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrders_Orders_OrderLines_Orderline : IOrders_Orders_OrderLines
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrders_Orders_OrderLines_Product
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrders_Orders_OrderLines_Product_Product : IOrders_Orders_OrderLines_Product
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public enum OrderStatus
    {
        New,
        Paid,
        Opentopick,
        Shipped,
        Delivered,
        Returned
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrderStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, OrderStatus>
    {
        public global::System.String TypeName => "OrderStatus";
        public OrderStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "NEW" => OrderStatus.New,
                "PAID" => OrderStatus.Paid,
                "OPENTOPICK" => OrderStatus.Opentopick,
                "SHIPPED" => OrderStatus.Shipped,
                "DELIVERED" => OrderStatus.Delivered,
                "RETURNED" => OrderStatus.Returned,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                OrderStatus.New => "NEW",
                OrderStatus.Paid => "PAID",
                OrderStatus.Opentopick => "OPENTOPICK",
                OrderStatus.Shipped => "SHIPPED",
                OrderStatus.Delivered => "DELIVERED",
                OrderStatus.Returned => "RETURNED",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the Orders GraphQL operation
    /// <code>
    /// query Orders {
    ///   orders {
    ///     __typename
    ///     id
    ///     orderStatus
    ///     orderLines {
    ///       __typename
    ///       id
    ///       product {
    ///         __typename
    ///         name
    ///         ... on Product {
    ///           id
    ///         }
    ///       }
    ///       ... on Orderline {
    ///         id
    ///       }
    ///     }
    ///     ... on Order {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrdersQueryDocument : global::StrawberryShake.IDocument
    {
        private OrdersQueryDocument()
        {
        }

        public static OrdersQueryDocument Instance { get; } = new OrdersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "0d33a643db23f16f3380bf50049fa73f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Orders GraphQL operation
    /// <code>
    /// query Orders {
    ///   orders {
    ///     __typename
    ///     id
    ///     orderStatus
    ///     orderLines {
    ///       __typename
    ///       id
    ///       product {
    ///         __typename
    ///         name
    ///         ... on Product {
    ///           id
    ///         }
    ///       }
    ///       ... on Orderline {
    ///         id
    ///       }
    ///     }
    ///     ... on Order {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrdersQuery : global::StrawberryShakeClient.IOrdersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOrdersResult> _operationExecutor;
        public OrdersQuery(global::StrawberryShake.IOperationExecutor<IOrdersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOrdersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IOrdersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOrdersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OrdersQueryDocument.Instance.Hash.Value, name: "Orders", document: OrdersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the Orders GraphQL operation
    /// <code>
    /// query Orders {
    ///   orders {
    ///     __typename
    ///     id
    ///     orderStatus
    ///     orderLines {
    ///       __typename
    ///       id
    ///       product {
    ///         __typename
    ///         name
    ///         ... on Product {
    ///           id
    ///         }
    ///       }
    ///       ... on Orderline {
    ///         id
    ///       }
    ///     }
    ///     ... on Order {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrdersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IOrdersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOrdersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the OrderClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrderClient : global::StrawberryShakeClient.IOrderClient
    {
        private readonly global::StrawberryShakeClient.IOrdersQuery _orders;
        public OrderClient(global::StrawberryShakeClient.IOrdersQuery orders)
        {
            _orders = orders ?? throw new global::System.ArgumentNullException(nameof(orders));
        }

        public static global::System.String ClientName => "OrderClient";
        public global::StrawberryShakeClient.IOrdersQuery Orders => _orders;
    }

    /// <summary>
    /// Represents the OrderClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IOrderClient
    {
        global::StrawberryShakeClient.IOrdersQuery Orders { get; }
    }
}

namespace StrawberryShakeClient.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrderEntity
    {
        public OrderEntity(global::System.Int32 id = default !, global::StrawberryShakeClient.OrderStatus orderStatus = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> orderLines = default !)
        {
            Id = id;
            OrderStatus = orderStatus;
            OrderLines = orderLines;
        }

        public global::System.Int32 Id { get; }

        public global::StrawberryShakeClient.OrderStatus OrderStatus { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> OrderLines { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrderlineEntity
    {
        public OrderlineEntity(global::System.Int32 id = default !, global::StrawberryShake.EntityId product = default !)
        {
            Id = id;
            Product = product;
        }

        public global::System.Int32 Id { get; }

        public global::StrawberryShake.EntityId Product { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class ProductEntity
    {
        public ProductEntity(global::System.String name = default !)
        {
            Name = name;
        }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrdersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.OrdersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.OrderEntity, Orders_Orders_Order> _orders_Orders_OrderFromOrderEntityMapper;
        public OrdersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.OrderEntity, Orders_Orders_Order> orders_Orders_OrderFromOrderEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _orders_Orders_OrderFromOrderEntityMapper = orders_Orders_OrderFromOrderEntityMapper ?? throw new global::System.ArgumentNullException(nameof(orders_Orders_OrderFromOrderEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::StrawberryShakeClient.IOrdersResult);
        public OrdersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OrdersResultInfo info)
            {
                return new OrdersResult(MapNonNullableIOrders_OrdersNonNullableArray(info.Orders, snapshot));
            }

            throw new global::System.ArgumentException("OrdersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOrders_Orders> MapNonNullableIOrders_OrdersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var orders = new global::System.Collections.Generic.List<global::StrawberryShakeClient.IOrders_Orders>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                orders.Add(MapNonNullableIOrders_Orders(child, snapshot));
            }

            return orders;
        }

        private global::StrawberryShakeClient.IOrders_Orders MapNonNullableIOrders_Orders(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                return _orders_Orders_OrderFromOrderEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeClient.State.OrderEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrdersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OrdersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> orders, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Orders = orders;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Orders { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OrdersResultInfo(Orders, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Orders_Orders_OrderFromOrderEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.OrderEntity, Orders_Orders_Order>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.OrderlineEntity, Orders_Orders_OrderLines_Orderline> _orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.ProductEntity, Orders_Orders_OrderLines_Product_Product> _orders_Orders_OrderLines_Product_ProductFromProductEntityMapper;
        public Orders_Orders_OrderFromOrderEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.OrderlineEntity, Orders_Orders_OrderLines_Orderline> orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper, global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.ProductEntity, Orders_Orders_OrderLines_Product_Product> orders_Orders_OrderLines_Product_ProductFromProductEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper = orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper ?? throw new global::System.ArgumentNullException(nameof(orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper));
            _orders_Orders_OrderLines_Product_ProductFromProductEntityMapper = orders_Orders_OrderLines_Product_ProductFromProductEntityMapper ?? throw new global::System.ArgumentNullException(nameof(orders_Orders_OrderLines_Product_ProductFromProductEntityMapper));
        }

        public Orders_Orders_Order Map(global::StrawberryShakeClient.State.OrderEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Orders_Orders_Order(entity.Id, entity.OrderStatus, MapNonNullableIOrders_Orders_OrderLinesNonNullableArray(entity.OrderLines, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOrders_Orders_OrderLines> MapNonNullableIOrders_Orders_OrderLinesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var orderlines = new global::System.Collections.Generic.List<global::StrawberryShakeClient.IOrders_Orders_OrderLines>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                orderlines.Add(MapNonNullableIOrders_Orders_OrderLines(child, snapshot));
            }

            return orderlines;
        }

        private global::StrawberryShakeClient.IOrders_Orders_OrderLines MapNonNullableIOrders_Orders_OrderLines(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Orderline", global::System.StringComparison.Ordinal))
            {
                return _orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeClient.State.OrderlineEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShakeClient.IOrders_Orders_OrderLines_Product MapNonNullableIOrders_Orders_OrderLines_Product(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Product", global::System.StringComparison.Ordinal))
            {
                return _orders_Orders_OrderLines_Product_ProductFromProductEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeClient.State.ProductEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.OrderlineEntity, Orders_Orders_OrderLines_Orderline>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.ProductEntity, Orders_Orders_OrderLines_Product_Product> _orders_Orders_OrderLines_Product_ProductFromProductEntityMapper;
        public Orders_Orders_OrderLines_OrderlineFromOrderlineEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.ProductEntity, Orders_Orders_OrderLines_Product_Product> orders_Orders_OrderLines_Product_ProductFromProductEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _orders_Orders_OrderLines_Product_ProductFromProductEntityMapper = orders_Orders_OrderLines_Product_ProductFromProductEntityMapper ?? throw new global::System.ArgumentNullException(nameof(orders_Orders_OrderLines_Product_ProductFromProductEntityMapper));
        }

        public Orders_Orders_OrderLines_Orderline Map(global::StrawberryShakeClient.State.OrderlineEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Orders_Orders_OrderLines_Orderline(entity.Id, MapNonNullableIOrders_Orders_OrderLines_Product(entity.Product, snapshot));
        }

        private global::StrawberryShakeClient.IOrders_Orders_OrderLines_Product MapNonNullableIOrders_Orders_OrderLines_Product(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Product", global::System.StringComparison.Ordinal))
            {
                return _orders_Orders_OrderLines_Product_ProductFromProductEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeClient.State.ProductEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Orders_Orders_OrderLines_Product_ProductFromProductEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.ProductEntity, Orders_Orders_OrderLines_Product_Product>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Orders_Orders_OrderLines_Product_ProductFromProductEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Orders_Orders_OrderLines_Product_Product Map(global::StrawberryShakeClient.State.ProductEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Orders_Orders_OrderLines_Product_Product(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrdersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOrdersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOrdersResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::StrawberryShakeClient.OrderStatus> _orderStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public OrdersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOrdersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _orderStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::StrawberryShakeClient.OrderStatus>("OrderStatus") ?? throw new global::System.ArgumentException("No serializer for type `OrderStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IOrdersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOrdersResult Result, OrdersResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IOrdersResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOrdersResult, OrdersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> ordersId = default !;
            _entityStore.Update(session =>
            {
                ordersId = UpdateNonNullableIOrders_OrdersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orders"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OrdersResultInfo(ordersId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIOrders_OrdersEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var orders = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                orders.Add(UpdateNonNullableIOrders_OrdersEntity(session, child, entityIds));
            }

            return orders;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIOrders_OrdersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeClient.State.OrderEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.OrderEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableOrderStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderStatus")), UpdateNonNullableIOrders_Orders_OrderLinesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderLines"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.OrderEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableOrderStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderStatus")), UpdateNonNullableIOrders_Orders_OrderLinesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderLines"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::StrawberryShakeClient.OrderStatus DeserializeNonNullableOrderStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _orderStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIOrders_Orders_OrderLinesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var orderlines = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                orderlines.Add(UpdateNonNullableIOrders_Orders_OrderLinesEntity(session, child, entityIds));
            }

            return orderlines;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIOrders_Orders_OrderLinesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Orderline", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeClient.State.OrderlineEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.OrderlineEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), UpdateNonNullableIOrders_Orders_OrderLines_ProductEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "product"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.OrderlineEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), UpdateNonNullableIOrders_Orders_OrderLines_ProductEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "product"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIOrders_Orders_OrderLines_ProductEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Product", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeClient.State.ProductEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.ProductEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.ProductEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrderClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Order" => ParseOrderEntityId(obj, __typename),
                "Orderline" => ParseOrderlineEntityId(obj, __typename),
                "Product" => ParseProductEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Order" => FormatOrderEntityId(entityId),
                "Orderline" => FormatOrderlineEntityId(entityId),
                "Product" => FormatProductEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseOrderEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatOrderEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrderlineEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatOrderlineEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProductEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatProductEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class OrderClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public OrderClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
